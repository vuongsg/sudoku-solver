{"version":3,"sources":["slices/sudoku-slices.ts","components/Footer.tsx","components/Header.tsx","solver.ts","components/Sudoku.tsx","App.tsx","reportWebVitals.ts","store.ts","index.tsx"],"names":["Footer","id","Header","initialState","Array","i","fill","sudokuSlice","createSlice","name","reducers","changeBoard","state","action","payload","actions","Solver","board","rowMap","colMap","cellMap","this","Map","rows","length","cols","j","c","has","set","cell","Math","floor","get","tryNext","rowStart","colStart","isValid","filter","m","row","col","indexOf","Sudoku","useSelector","sudoku","useEffect","divs","document","querySelector","getElementsByTagName","n","child","className","innerHTML","displayBoardToUI","dispatch","useDispatch","dragNumber","e","dataTransfer","setData","target","value","allowDrop","preventDefault","handleDrop","data","getData","handleKeyDown","key","keyCode","rowsInBoard","cells","k","push","React","createElement","tabIndex","onDragOver","onDrop","onKeyDown","initializeBoardFromUI","newBoard","childArr","tempArr","produceSolution","a","solver","solve","type","draggable","onDragStart","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","sudokuReducer","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.01d8e0dc.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nlet initialState: string[][] = Array(9);\r\nfor (let i = 0; i < 9; i++) {\r\n    initialState[i] = Array(9).fill('');\r\n}\r\n\r\nconst sudokuSlice = createSlice({\r\n    name: 'sudoku',\r\n    initialState: initialState,\r\n    reducers: {\r\n        changeBoard: (state: string[][], action: PayloadAction<string[][]>) => {\r\n            return action.payload;\r\n        }\r\n    }\r\n})\r\n\r\nexport const { changeBoard } = sudokuSlice.actions;\r\nexport default sudokuSlice.reducer;","import './footer.scss';\r\n\r\nexport const Footer = () => {\r\n    return (\r\n        <footer id=\"main-footer\">\r\n            <h3>Created by Vuong Nguyen &copy; 2021</h3>\r\n        </footer>\r\n    )\r\n}","import './header.scss';\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <header id=\"main-header\">\r\n            <h1>Sudoku Solver</h1>\r\n        </header>\r\n    )\r\n}","export default class Solver {\r\n    board: string[][];\r\n    rowMap: Map<number, string[]>;\r\n    colMap: Map<number, string[]>;\r\n    cellMap: Map<number, string[]>;\r\n\r\n    constructor(board: string[][]) {\r\n        this.board = board;\r\n        this.rowMap = new Map<number, string[]>();\r\n        this.colMap = new Map<number, string[]>();\r\n        this.cellMap = new Map<number, string[]>();\r\n\r\n        //Fill in value\r\n        let rows = this.board.length;\r\n        let cols = this.board[0].length;\r\n\r\n        for (let i = 0; i < rows; i++)\r\n            for (let j = 0; j < cols; j++) {\r\n                let c = this.board[i][j];\r\n\r\n                if (c !== '') {\r\n                    if (!this.rowMap.has(i)) {\r\n                        this.rowMap.set(i, []);\r\n                    }\r\n\r\n                    if (!this.colMap.has(j)) {\r\n                        this.colMap.set(j, []);\r\n                    }\r\n\r\n                    let cell = Math.floor(i / 3) * 3 + Math.floor(j / 3);\r\n                    if (!this.cellMap.has(cell)) {\r\n                        this.cellMap.set(cell, []);\r\n                    }\r\n\r\n                    this.rowMap.set(i,[...this.rowMap.get(i) ?? [], c]);\r\n                    this.colMap.set(j, [...this.colMap.get(j) ?? [], c]);\r\n                    this.cellMap.set(cell, [...this.cellMap.get(cell) ?? [], c]);\r\n            }\r\n        }\r\n    }\r\n\r\n    solve(): string[][] {\r\n        this.tryNext(0, 0, this.board.length, this.board[0].length);\r\n        return this.board;\r\n    }\r\n    \r\n    tryNext(rowStart: number, colStart: number, rows: number, cols: number): boolean {\r\n        if (colStart === cols) {\r\n            ++rowStart;\r\n            colStart = 0;\r\n        }\r\n    \r\n        if (rowStart === rows) {\r\n            return true;\r\n        }\r\n\r\n        while (this.board[rowStart][colStart] !== '') {\r\n            ++colStart;\r\n            if (colStart === cols) {\r\n                ++rowStart;\r\n                colStart = 0;\r\n            }\r\n\r\n            if (rowStart === rows) {\r\n                return true;\r\n            }\r\n        }\r\n    \r\n        for (let c of '123456789') {\r\n            if (this.isValid(rowStart, colStart, c)) {\r\n                this.board[rowStart][colStart] = c;\r\n                if (!this.rowMap.has(rowStart)) {\r\n                    this.rowMap.set(rowStart, [c]);\r\n                } else {\r\n                    this.rowMap.set(rowStart, [...this.rowMap.get(rowStart) ?? [], c]);\r\n                }\r\n\r\n                if (!this.colMap.has(colStart)) {\r\n                    this.colMap.set(colStart, [c]);\r\n                } else {\r\n                    this.colMap.set(colStart, [...this.colMap.get(colStart) ?? [], c])\r\n                }\r\n\r\n                let cell = Math.floor(rowStart / 3) * 3 + Math.floor(colStart / 3);\r\n                if (!this.cellMap.has(cell)) {\r\n                    this.cellMap.set(cell, [c]);\r\n                } else {\r\n                    this.cellMap.set(cell, [...this.cellMap.get(cell) ?? [], c]);\r\n                }\r\n\r\n                if (this.tryNext(rowStart, colStart + 1, rows, cols)) {\r\n                    return true;\r\n                }\r\n\r\n                this.board[rowStart][colStart] = '';\r\n                this.rowMap.set(rowStart, this.rowMap.get(rowStart)?.filter(m => m !== c) ?? []);\r\n                this.colMap.set(colStart, this.colMap.get(colStart)?.filter(m => m !== c) ?? []);\r\n                this.cellMap.set(cell, this.cellMap.get(cell)?.filter(m => m !== c) ?? []);\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    isValid(row: number, col: number, c: string): boolean {\r\n        //Check row\r\n        if (this.rowMap.has(row) && this.rowMap.get(row)?.indexOf(c) !== -1) {\r\n            return false;\r\n        }\r\n\r\n        //Check column\r\n        if (this.colMap.has(col) && this.colMap.get(col)?.indexOf(c) !== -1) {\r\n            return false;\r\n        }\r\n\r\n        //Check cell\r\n        const cell = Math.floor(row / 3) * 3 + Math.floor(col / 3);\r\n        if (this.cellMap.has(cell) && this.cellMap.get(cell)?.indexOf(c) !== -1) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport './sudoku.scss';\r\nimport { changeBoard } from '../slices/sudoku-slices';\r\nimport { RootType } from '../store';\r\nimport Solver from '../solver';\r\n\r\nconst Sudoku = () => {\r\n    let board = useSelector<RootType>(state => state.sudoku) as string[][];\r\n\r\n    useEffect(() => {\r\n        /**\r\n     * Display board to UI\r\n     * @returns \r\n     */\r\n        const displayBoardToUI = (): void => {\r\n            let divs = document.querySelector(\"#board-div\")?.getElementsByTagName(\"div\") ?? [];\r\n\r\n            let rowStart = 0, colStart = 0, rows = board.length, cols = board[0].length;\r\n            for (let i = 0, n = divs.length; i < n; i++) {\r\n                let child = divs[i] as HTMLDivElement;\r\n\r\n                if (child !== null && child.className === 'num-cell') {\r\n                    child.innerHTML = board[rowStart][colStart++];\r\n                    if (colStart === cols) {\r\n                        ++rowStart;\r\n                        colStart = 0;\r\n                    }\r\n\r\n                    if (rowStart === rows) {\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        displayBoardToUI();\r\n    }, [board]);\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    const dragNumber = (e: React.DragEvent<HTMLInputElement>): void => {\r\n        e.dataTransfer.setData(\"text/plain\", (e.target as HTMLInputElement).value);\r\n    }\r\n\r\n    const allowDrop = (e: React.DragEvent<HTMLDivElement>): void => {\r\n        e.preventDefault();\r\n    }\r\n\r\n    const handleDrop = (e: React.DragEvent<HTMLDivElement>): void => {\r\n        e.preventDefault();\r\n        let data = e.dataTransfer.getData(\"text/plain\");\r\n        (e.target as HTMLDivElement).innerHTML = data;\r\n    }\r\n\r\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>): void => {\r\n        e.preventDefault();\r\n        if ((e.key >= '1' && e.key <= '9')) {\r\n            (e.target as HTMLDivElement).innerHTML = e.key;\r\n        } else if (e.keyCode === 8 || e.keyCode === 46) {   // 8: backspace, 46: delete\r\n            (e.target as HTMLDivElement).innerHTML = '';\r\n        }\r\n    }\r\n\r\n    //Draw board\r\n    const rowsInBoard: React.ReactElement[] = [];\r\n    for (let i = 0; i < 9; i++) {\r\n        const cells: React.ReactElement[] = [];\r\n        for (let k = 0; k < 9; k++) {\r\n            cells.push(React.createElement('div', { className: 'num-cell', tabIndex: 0, onDragOver: allowDrop, onDrop: handleDrop, onKeyDown: handleKeyDown }));\r\n        }\r\n\r\n        rowsInBoard.push(React.createElement('div', { className: 'row' }, cells));\r\n    }\r\n\r\n    /**\r\n     * Set value for board from UI\r\n     */\r\n    const initializeBoardFromUI = (): string[][] => {\r\n        let divs = document.querySelector(\"#board-div\")?.getElementsByTagName(\"div\") ?? [];\r\n        let newBoard: string[][] = [];\r\n        let cols = board[0].length;\r\n        let rowStart = 0, colStart = 0;\r\n        let childArr: string[] = [];\r\n\r\n        for (let i = 0, n = divs.length; i < n; i++) {\r\n            //newBoard[i] = [];\r\n            let child = divs[i] as HTMLDivElement;\r\n            if (child !== null && child.className === \"num-cell\") {\r\n                childArr.push(child.innerHTML);\r\n                if (colStart === cols - 1)  {\r\n                    let tempArr = [...childArr];\r\n                    newBoard.push(tempArr);\r\n                }\r\n\r\n                ++colStart;\r\n                if (colStart === cols) {\r\n                    ++rowStart;\r\n                    colStart = 0;\r\n                    childArr = [];\r\n                }\r\n            }\r\n        }\r\n\r\n        return newBoard;\r\n    }\r\n\r\n    const clearBoard = (): void => {\r\n        const newBoard: string[][] = Array(board.length);\r\n        let cols = board[0].length;\r\n        for (let i = 0, n = board.length; i < n; i++) {\r\n            newBoard[i] = Array(cols).fill('');\r\n        }\r\n\r\n        dispatch(changeBoard(newBoard));\r\n    }\r\n\r\n    /**\r\n     * Solve puzzle\r\n     */\r\n    const produceSolution = async(): Promise<void> => {\r\n        let newBoard = initializeBoardFromUI();\r\n        const solver = new Solver(newBoard);\r\n        newBoard = await solver.solve();\r\n        dispatch(changeBoard(newBoard));\r\n    }\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <section id=\"numbers-div\">\r\n                <input type=\"button\" value=\"1\" draggable=\"true\" onDragStart={dragNumber} />\r\n                <input type=\"button\" value=\"2\" draggable=\"true\" onDragStart={dragNumber} />\r\n                <input type=\"button\" value=\"3\" draggable=\"true\" onDragStart={dragNumber} />\r\n                <input type=\"button\" value=\"4\" draggable=\"true\" onDragStart={dragNumber} />\r\n                <input type=\"button\" value=\"5\" draggable=\"true\" onDragStart={dragNumber} />\r\n                <input type=\"button\" value=\"6\" draggable=\"true\" onDragStart={dragNumber} />\r\n                <input type=\"button\" value=\"7\" draggable=\"true\" onDragStart={dragNumber} />\r\n                <input type=\"button\" value=\"8\" draggable=\"true\" onDragStart={dragNumber} />\r\n                <input type=\"button\" value=\"9\" draggable=\"true\" onDragStart={dragNumber} />\r\n            </section>\r\n            <section id=\"board-div\">\r\n                { rowsInBoard }\r\n                {/* <div className=\"row\">\r\n                    <div className=\"num-cell\" tabIndex={0} onDragOver={allowDrop} onDrop={handleDrop} onKeyDown={handleKeyDown} />\r\n                    <div className=\"num-cell\" tabIndex={0} onDragOver={allowDrop} onDrop={handleDrop} onKeyDown={handleKeyDown} />\r\n                    <div className=\"num-cell\" tabIndex={0} onDragOver={allowDrop} onDrop={handleDrop} onKeyDown={handleKeyDown} />\r\n                    <div className=\"num-cell\" tabIndex={0} onDragOver={allowDrop} onDrop={handleDrop} onKeyDown={handleKeyDown} />\r\n                    <div className=\"num-cell\" tabIndex={0} onDragOver={allowDrop} onDrop={handleDrop} onKeyDown={handleKeyDown} />\r\n                    <div className=\"num-cell\" tabIndex={0} onDragOver={allowDrop} onDrop={handleDrop} onKeyDown={handleKeyDown} />\r\n                    <div className=\"num-cell\" tabIndex={0} onDragOver={allowDrop} onDrop={handleDrop} onKeyDown={handleKeyDown} />\r\n                    <div className=\"num-cell\" tabIndex={0} onDragOver={allowDrop} onDrop={handleDrop} onKeyDown={handleKeyDown} />\r\n                    <div className=\"num-cell\" tabIndex={0} onDragOver={allowDrop} onDrop={handleDrop} onKeyDown={handleKeyDown} />\r\n                </div> */}\r\n            </section>\r\n            <section id=\"control-table\">\r\n                <input type=\"button\" value=\"Clear board\" onClick={clearBoard} />\r\n                <input type=\"button\" value=\"Solve it\" onClick={produceSolution} />\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sudoku;","import React from 'react';\nimport './App.scss';\nimport { Footer } from './components/Footer';\nimport { Header } from './components/Header';\nimport Sudoku from './components/Sudoku';\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <div className='App'>\n        <Sudoku />\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport sudokuReducer from './slices/sudoku-slices';\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        sudoku: sudokuReducer\r\n    }\r\n});\r\n\r\nexport type RootType = ReturnType<typeof store.getState>;\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}